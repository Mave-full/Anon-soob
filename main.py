import asyncio
import logging
import config as cfg
import buttons as bt
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    CallbackQuery
)

router = Router()


class Form(StatesGroup):
    text = State()

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}, —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏ /anon –∏–ª–∏ –∂–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá.", reply_markup=bt.anon_kb())

@router.message(Command("anon"))
async def command_anon_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–∞–Ω–∞–ª–∞ MAVER.", reply_markup=bt.canc_kb())

@router.callback_query(F.data == 'anon')
async def anon_callback(call: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Form.text)
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–∞–Ω–∞–ª–∞ MAVER.", reply_markup=bt.canc_kb())

@router.message(Form.text)
async def process_text(message: Message, state: FSMContext, bot: Bot) -> None:
    await state.clear()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã –≤ –º–µ–Ω—é \n–Ω–∞–ø–∏—à–∏ /anon –∏–ª–∏ –∂–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá.", reply_markup=bt.anon_kb())
    for id in cfg.admins:
        await bot.send_message(id, text=f"–£ –≤–∞—Å –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<pre>{message.text}</pre>\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ!")

async def main() -> None:
    bot = Bot(cfg.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
